version: '3.7'

services:

# one-off containers: The following services are intended for use during
# data preparation.

  generate:
    build: generate
    stdin_open: true
    tty: true
    command: ["true"]
    volumes:
      - "${DIR}:${DIR}"

  convert:
    build: convert
    stdin_open: true
    tty: true
    command: ["true"]
    volumes:
      - "${DIR}:${DIR}"

  upload:
    build: benchmark
    stdin_open: true
    tty: true
    entrypoint: ["conda", "run", "-n", "benchmark", "bash", "/tmp/upload.sh"]
    volumes:
      - "${DIR}:${DIR}:ro"
      - "./upload.sh:/tmp/upload.sh"
    environment:
      - BASE
      - DIR
      - NAME
      - HOST
      - MINIO_ACCESS_KEY=${AWS_ACCESS_KEY_ID}
      - MINIO_SECRET_KEY=${AWS_SECRET_ACCESS_KEY}

  benchmark:
    build: benchmark
    stdin_open: true
    tty: true
    command: ["true"]
    volumes:
      - "${DIR}:${DIR}"
      - "./benchmark:/benchmark:ro"
    environment:
      - AWS_ACCESS_KEY_ID
      - AWS_SECRET_ACCESS_KEY
      - BUCKET
      - S3ARGS
      - XY
      - Z
      - C
      - T
      - XC
      - ZC
      - BASE
      - NAME
      - DIR
      - HOST
      - ROUNDS
      - TEST_REPEATS

# from:   https://docs.min.io/docs/deploy-minio-on-docker-compose.html

# starts 4 docker containers running minio server instances.
# using nginx reverse proxy, load balancing, you can access
# it through port 9000.

  minio1:
    image: minio/minio:RELEASE.2021-01-05T05-22-38Z
    volumes:
      - "${ROOT}/data1-1:/data1"
      - "${ROOT}/data1-2:/data2"
    expose:
      - "9000"
    environment:
      - MINIO_ACCESS_KEY=${AWS_ACCESS_KEY_ID}
      - MINIO_SECRET_KEY=${AWS_SECRET_ACCESS_KEY}
    command: server http://minio{1...4}/data{1...2}
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  minio2:
    image: minio/minio:RELEASE.2021-01-05T05-22-38Z
    volumes:
      - "${ROOT}/data2-1:/data1"
      - "${ROOT}/data2-2:/data2"
    expose:
      - "9000"
    environment:
      - MINIO_ACCESS_KEY=${AWS_ACCESS_KEY_ID}
      - MINIO_SECRET_KEY=${AWS_SECRET_ACCESS_KEY}
    command: server http://minio{1...4}/data{1...2}
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  minio3:
    image: minio/minio:RELEASE.2021-01-05T05-22-38Z
    volumes:
      - "${ROOT}/data3-1:/data1"
      - "${ROOT}/data3-2:/data2"
    expose:
      - "9000"
    environment:
      - MINIO_ACCESS_KEY=${AWS_ACCESS_KEY_ID}
      - MINIO_SECRET_KEY=${AWS_SECRET_ACCESS_KEY}
    command: server http://minio{1...4}/data{1...2}
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  minio4:
    image: minio/minio:RELEASE.2021-01-05T05-22-38Z
    volumes:
      - "${ROOT}/data4-1:/data1"
      - "${ROOT}/data4-2:/data2"
    expose:
      - "9000"
    environment:
      - MINIO_ACCESS_KEY=${AWS_ACCESS_KEY_ID}
      - MINIO_SECRET_KEY=${AWS_SECRET_ACCESS_KEY}
    command: server http://minio{1...4}/data{1...2}
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  nginx:
    image: nginx:1.19.2-alpine
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - "${DIR}:/data:ro"
    ports:
      - "8000:8000"
      - "9000:9000"
    depends_on:
      - minio1
      - minio2
      - minio3
      - minio4
